/*
 * Copyright (C) 2015 Group #
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package varietystore_managementsystem.UserInterface;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.sql.*;
import java.util.*;
import java.io.*;
import static java.awt.GraphicsDevice.WindowTranslucency.*;
import java.util.regex.Pattern;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ilaga_Family
 */
public class 
        CashRegister extends javax.swing.JFrame 
{
    
    /**
     * Static Variables
     */
    static Connection connection        =   null;
    static int UID                      =   0;
    
    private String dbname               =   "sales_inventory";
    
    private String userTableName        =   "user_tbl";
    private String productTableField    =   "product_tbl";
    private String customerTable        =   "customer_tbl";
    private String historyTable         =   "history_tbl";
    private String inventoryTable       =   "inventory_tbl";
    private String paymentTable         =   "payment_tbl";
    private String transactionTable     =   "transaction_tbl";
    
    private String userIDField          =   "UserID";
    private String firstNameField       =   "FirstName";
    private String lastNameField        =   "LastName";
    private String userTypeField        =   "user_type";
    
    private String productIDField       =   "ProductID";
    private String productNameField     =   "ProductName";
    private String productPriceField    =   "Price";
    private String productTypeField     =   "TypeCode";
    
    private String customerIDField      =   "CustomerID";
    private String customerNameField    =   "CustomerName";
    private String customerAddressField =   "Address";
    
    private String historyIDField       =   "HistoryID";
    private String historyNameField     =   "ItemName";
    private String historyQuantityField =   "ItemQuantity";
    
    private String inventoryIDField     =   "InventoryID";
    private String inventoryQuantity    =   "ItemQuantity";
    
    private String paymentCodeField     =   "Payment_Code";
    private String paymentTypeField     =   "Payment_type";
    
    private String transactionIDField   =   "TransactionID";
    private String transactionUserID    =   "UserID";
    private String transactionProductID     =   "ProductID";
    
    
    private DefaultTableModel model;
    
    int prodID = 0;
    String prodName = "";
    double prodPrice = 0.00;
    int prodType = 0;
    
    private int customerID = 0;
    private int cardNumber = 0;
    private String customerNameInput = "";
    private String customerAddressInput = "";
    private int transactionNumber = 0;
    double paymentRecieved = 0.00;
    private String cardNumberInput = "";
    private boolean isCash = true;
    private boolean isCheckout = false;
    private boolean isReady = false;
    
    /**
     * Creates new form CashRegister
     * @param connection
     */
    protected
        CashRegister(Connection connection, int userID) 
    {
        
        this.connection = connection;
        this.UID = userID;
        
        initComponents();
        userInit ();
        
        if (connection == null) {
            System.out.printf ("Connection si Null!");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlSearch = new javax.swing.JPanel();
        lblProdNo = new javax.swing.JLabel();
        lblProdName = new javax.swing.JLabel();
        lblProdType = new javax.swing.JLabel();
        tfProdNo = new javax.swing.JTextField();
        tfProdName = new javax.swing.JTextField();
        cboProdType = new javax.swing.JComboBox();
        btnSearch = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        pnlProdData = new javax.swing.JPanel();
        lblPhp = new javax.swing.JLabel();
        lblPrice = new javax.swing.JLabel();
        lblMultiply = new javax.swing.JLabel();
        lblQty = new javax.swing.JLabel();
        tfQty = new javax.swing.JTextField();
        lblEquals = new javax.swing.JLabel();
        lblPhpTotal = new javax.swing.JLabel();
        lblTotalPrice = new javax.swing.JLabel();
        lblProdPriceInit = new javax.swing.JLabel();
        lblQuantity = new javax.swing.JLabel();
        lblTotalHead = new javax.swing.JLabel();
        btnAddToCart = new javax.swing.JButton();
        btnRemoveProdData = new javax.swing.JButton();
        pnlOrder = new javax.swing.JPanel();
        btnRemove = new javax.swing.JButton();
        btnProcToCheckOut = new javax.swing.JButton();
        tableScroll = new javax.swing.JScrollPane();
        tblOrder = new javax.swing.JTable();
        pnlAmountDue = new javax.swing.JPanel();
        lblTotalAmountDue = new javax.swing.JLabel();
        lblTotalAmount = new javax.swing.JLabel();
        lblAmountPhp = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        lblMDY = new javax.swing.JLabel();
        pnlCheckOut = new javax.swing.JPanel();
        btnCashTendered = new javax.swing.JButton();
        btnCardPayment = new javax.swing.JButton();
        btnCheckOut = new javax.swing.JButton();
        btnReciept = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();
        lblBackground = new javax.swing.JLabel();
        mbCashRegister = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuItemNew = new javax.swing.JMenuItem();
        menuItemExit = new javax.swing.JMenuItem();
        menuCashRegister = new javax.swing.JMenu();
        menuItemRegister = new javax.swing.JMenuItem();
        menuItemViewUser = new javax.swing.JMenuItem();
        menuItemEditUser = new javax.swing.JMenuItem();
        menuItemSecure = new javax.swing.JMenuItem();
        menuItemBackup = new javax.swing.JMenuItem();
        menuItemRestore = new javax.swing.JMenuItem();
        menuSwitch = new javax.swing.JMenu();
        menuItemInventory = new javax.swing.JMenuItem();
        menuItemViewReport = new javax.swing.JMenuItem();
        menuAbout = new javax.swing.JMenu();
        menuItemHelp = new javax.swing.JMenuItem();
        menuItemAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Variety Store Management System");
        setPreferredSize(new java.awt.Dimension(830, 625));
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                formWindowLostFocus(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        getContentPane().setLayout(null);

        pnlSearch.setBackground(new java.awt.Color (0, 0, 0, 0));
        pnlSearch.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Search Product", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Berlin Sans FB", 0, 11))); // NOI18N
        pnlSearch.setToolTipText("Search Product");
        pnlSearch.setFont(new java.awt.Font("Berlin Sans FB", 0, 12)); // NOI18N
        pnlSearch.setMinimumSize(new java.awt.Dimension(569, 130));

        lblProdNo.setFont(new java.awt.Font("Berlin Sans FB", 0, 12)); // NOI18N
        lblProdNo.setText("Product No:");

        lblProdName.setFont(new java.awt.Font("Berlin Sans FB", 0, 12)); // NOI18N
        lblProdName.setText("Product Name:");

        lblProdType.setFont(new java.awt.Font("Berlin Sans FB", 0, 12)); // NOI18N
        lblProdType.setText("Product Type:");

        tfProdNo.setFont(new java.awt.Font("Lucida Console", 0, 11)); // NOI18N
        tfProdNo.setToolTipText("Product Number");

        tfProdName.setFont(new java.awt.Font("Lucida Console", 0, 11)); // NOI18N
        tfProdName.setToolTipText("Product Name");

        cboProdType.setFont(new java.awt.Font("Lucida Console", 0, 11)); // NOI18N
        cboProdType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---", "Beverages", "Canned / Jarred Goods", "Cleaners", "Condiments", "Dairy", "Medicine", "Paper Goods", "Packed Goods", "Personal Care", "Others" }));
        cboProdType.setToolTipText("Product Type");

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/varietystore_managementsystem/ELEMENTS/CASH_REGISTER/IconBinoculars.png"))); // NOI18N
        btnSearch.setToolTipText("Search Item");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/varietystore_managementsystem/ELEMENTS/CASH_REGISTER/IconCancel.png"))); // NOI18N
        btnCancel.setToolTipText("Remove Item");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/varietystore_managementsystem/ELEMENTS/CASH_REGISTER/IconAdd.png"))); // NOI18N
        btnAdd.setToolTipText("Add Item to Product Data");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlSearchLayout = new javax.swing.GroupLayout(pnlSearch);
        pnlSearch.setLayout(pnlSearchLayout);
        pnlSearchLayout.setHorizontalGroup(
            pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSearchLayout.createSequentialGroup()
                        .addGroup(pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblProdName, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblProdType, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cboProdType, 0, 352, Short.MAX_VALUE)
                            .addComponent(tfProdName)))
                    .addGroup(pnlSearchLayout.createSequentialGroup()
                        .addComponent(lblProdNo, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                        .addComponent(tfProdNo, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlSearchLayout.createSequentialGroup()
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );
        pnlSearchLayout.setVerticalGroup(
            pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlSearchLayout.createSequentialGroup()
                        .addGroup(pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblProdNo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlSearchLayout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(tfProdNo)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblProdName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfProdName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblProdType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cboProdType, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSearchLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnCancel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        getContentPane().add(pnlSearch);
        pnlSearch.setBounds(19, 22, 560, 130);

        pnlProdData.setBackground(new java.awt.Color (0, 0, 0, 0));
        pnlProdData.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Product Data", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Berlin Sans FB", 0, 11))); // NOI18N
        pnlProdData.setToolTipText("Individual Product Data");
        pnlProdData.setOpaque(false);

        lblPhp.setFont(new java.awt.Font("Franklin Gothic Book", 1, 18)); // NOI18N
        lblPhp.setText("PHP ");
        lblPhp.setToolTipText("Unit Price");

        lblPrice.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblPrice.setForeground(new java.awt.Color(51, 153, 0));
        lblPrice.setText("0.00");
        lblPrice.setToolTipText("Unit Price");

        lblMultiply.setFont(new java.awt.Font("Franklin Gothic Book", 1, 18)); // NOI18N
        lblMultiply.setText("*");

        lblQty.setFont(new java.awt.Font("Franklin Gothic Book", 1, 18)); // NOI18N
        lblQty.setText("QTY:");
        lblQty.setToolTipText("Unit Quantity");

        tfQty.setFont(new java.awt.Font("Lucida Console", 1, 18)); // NOI18N
        tfQty.setForeground(new java.awt.Color(51, 153, 0));
        tfQty.setToolTipText("Unit Quantity");
        tfQty.setEnabled(false);
        tfQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfQtyKeyPressed(evt);
            }
        });

        lblEquals.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblEquals.setText("=");

        lblPhpTotal.setFont(new java.awt.Font("Franklin Gothic Book", 1, 18)); // NOI18N
        lblPhpTotal.setText("PHP");
        lblPhpTotal.setToolTipText("Total Price");

        lblTotalPrice.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTotalPrice.setForeground(new java.awt.Color(51, 153, 0));
        lblTotalPrice.setText("0.00");
        lblTotalPrice.setToolTipText("Total Price");

        lblProdPriceInit.setFont(new java.awt.Font("Berlin Sans FB", 0, 14)); // NOI18N
        lblProdPriceInit.setText("Price");

        lblQuantity.setFont(new java.awt.Font("Berlin Sans FB", 0, 14)); // NOI18N
        lblQuantity.setText("Quantity");

        lblTotalHead.setFont(new java.awt.Font("Berlin Sans FB", 0, 14)); // NOI18N
        lblTotalHead.setText("Total Price");

        btnAddToCart.setFont(new java.awt.Font("Berlin Sans FB", 0, 11)); // NOI18N
        btnAddToCart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/varietystore_managementsystem/ELEMENTS/CASH_REGISTER/IconCart1.png"))); // NOI18N
        btnAddToCart.setText("Add To Cart");
        btnAddToCart.setToolTipText("Add item to the cart");
        btnAddToCart.setEnabled(false);
        btnAddToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToCartActionPerformed(evt);
            }
        });

        btnRemoveProdData.setFont(new java.awt.Font("Berlin Sans FB", 0, 11)); // NOI18N
        btnRemoveProdData.setIcon(new javax.swing.ImageIcon(getClass().getResource("/varietystore_managementsystem/ELEMENTS/CASH_REGISTER/IconCancel.png"))); // NOI18N
        btnRemoveProdData.setText("Remove");
        btnRemoveProdData.setToolTipText("Remove Item");
        btnRemoveProdData.setEnabled(false);
        btnRemoveProdData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveProdDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlProdDataLayout = new javax.swing.GroupLayout(pnlProdData);
        pnlProdData.setLayout(pnlProdDataLayout);
        pnlProdDataLayout.setHorizontalGroup(
            pnlProdDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProdDataLayout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addGroup(pnlProdDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlProdDataLayout.createSequentialGroup()
                        .addComponent(lblPhp)
                        .addGap(18, 18, 18)
                        .addComponent(lblPrice)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblMultiply)
                        .addGap(18, 18, 18)
                        .addComponent(lblQty)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfQty, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblEquals)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPhpTotal)
                        .addGap(18, 18, 18)
                        .addComponent(lblTotalPrice)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlProdDataLayout.createSequentialGroup()
                        .addGroup(pnlProdDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlProdDataLayout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(btnAddToCart)
                                .addGap(78, 78, 78)
                                .addComponent(btnRemoveProdData))
                            .addGroup(pnlProdDataLayout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(lblProdPriceInit)
                                .addGap(102, 102, 102)
                                .addComponent(lblQuantity)
                                .addGap(66, 66, 66)
                                .addComponent(lblTotalHead)))
                        .addContainerGap(134, Short.MAX_VALUE))))
        );
        pnlProdDataLayout.setVerticalGroup(
            pnlProdDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProdDataLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(pnlProdDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProdPriceInit)
                    .addComponent(lblQuantity)
                    .addComponent(lblTotalHead))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlProdDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPhp)
                    .addComponent(lblPrice)
                    .addComponent(lblMultiply)
                    .addComponent(lblQty)
                    .addComponent(tfQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEquals)
                    .addComponent(lblPhpTotal)
                    .addComponent(lblTotalPrice))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlProdDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemoveProdData)
                    .addComponent(btnAddToCart))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(pnlProdData);
        pnlProdData.setBounds(19, 157, 560, 141);

        pnlOrder.setBackground(new java.awt.Color (0, 0, 0, 0));
        pnlOrder.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Orders (Cart)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Berlin Sans FB", 0, 11))); // NOI18N
        pnlOrder.setToolTipText("Cart");

        btnRemove.setFont(new java.awt.Font("Berlin Sans FB", 0, 11)); // NOI18N
        btnRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/varietystore_managementsystem/ELEMENTS/CASH_REGISTER/IconCancel.png"))); // NOI18N
        btnRemove.setText("Remove");
        btnRemove.setToolTipText("Remove Selected Item");
        btnRemove.setEnabled(false);
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnProcToCheckOut.setFont(new java.awt.Font("Berlin Sans FB", 0, 11)); // NOI18N
        btnProcToCheckOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/varietystore_managementsystem/ELEMENTS/CASH_REGISTER/IconCart2.png"))); // NOI18N
        btnProcToCheckOut.setText("Proceed");
        btnProcToCheckOut.setToolTipText("Check Out Items");
        btnProcToCheckOut.setEnabled(false);
        btnProcToCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcToCheckOutActionPerformed(evt);
            }
        });

        tblOrder.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tblOrder.setFont(new java.awt.Font("Berlin Sans FB", 0, 11)); // NOI18N
        tblOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Item Quantity", "Item Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblOrder.setToolTipText("Orders");
        tableScroll.setViewportView(tblOrder);
        if (tblOrder.getColumnModel().getColumnCount() > 0) {
            tblOrder.getColumnModel().getColumn(0).setResizable(false);
            tblOrder.getColumnModel().getColumn(1).setResizable(false);
            tblOrder.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout pnlOrderLayout = new javax.swing.GroupLayout(pnlOrder);
        pnlOrder.setLayout(pnlOrderLayout);
        pnlOrderLayout.setHorizontalGroup(
            pnlOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOrderLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlOrderLayout.createSequentialGroup()
                        .addComponent(tableScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 534, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlOrderLayout.createSequentialGroup()
                        .addComponent(btnProcToCheckOut)
                        .addGap(18, 18, 18)
                        .addComponent(btnRemove)
                        .addGap(179, 179, 179))))
        );
        pnlOrderLayout.setVerticalGroup(
            pnlOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOrderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tableScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(pnlOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemove)
                    .addComponent(btnProcToCheckOut))
                .addContainerGap())
        );

        getContentPane().add(pnlOrder);
        pnlOrder.setBounds(19, 310, 560, 230);

        pnlAmountDue.setBackground(new java.awt.Color(0, 0, 0));
        pnlAmountDue.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 102, 102), new java.awt.Color(153, 153, 153), new java.awt.Color(51, 51, 51), new java.awt.Color(102, 102, 102)));
        pnlAmountDue.setToolTipText("Cash Register Running Balance");

        lblTotalAmountDue.setBackground(new java.awt.Color(0, 0, 0));
        lblTotalAmountDue.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblTotalAmountDue.setForeground(new java.awt.Color(0, 102, 0));
        lblTotalAmountDue.setText("Total Amount Due");

        lblTotalAmount.setBackground(new java.awt.Color(0, 0, 0));
        lblTotalAmount.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblTotalAmount.setForeground(new java.awt.Color(0, 255, 0));
        lblTotalAmount.setText("0.00");

        lblAmountPhp.setBackground(new java.awt.Color(0, 0, 0));
        lblAmountPhp.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblAmountPhp.setForeground(new java.awt.Color(0, 102, 0));
        lblAmountPhp.setText("PHP");

        lblDate.setBackground(new java.awt.Color(0, 0, 0));
        lblDate.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblDate.setForeground(new java.awt.Color(0, 102, 0));
        lblDate.setText("Date:");

        lblMDY.setBackground(new java.awt.Color(0, 0, 0));
        lblMDY.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblMDY.setForeground(new java.awt.Color(0, 102, 0));
        lblMDY.setText("1 / 1 / 1990  00:00 AM");

        javax.swing.GroupLayout pnlAmountDueLayout = new javax.swing.GroupLayout(pnlAmountDue);
        pnlAmountDue.setLayout(pnlAmountDueLayout);
        pnlAmountDueLayout.setHorizontalGroup(
            pnlAmountDueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAmountDueLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAmountDueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAmountDueLayout.createSequentialGroup()
                        .addComponent(lblAmountPhp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblTotalAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlAmountDueLayout.createSequentialGroup()
                        .addGroup(pnlAmountDueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlAmountDueLayout.createSequentialGroup()
                                .addComponent(lblTotalAmountDue)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(pnlAmountDueLayout.createSequentialGroup()
                                .addComponent(lblDate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblMDY, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        pnlAmountDueLayout.setVerticalGroup(
            pnlAmountDueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAmountDueLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTotalAmountDue)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlAmountDueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTotalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlAmountDueLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(lblAmountPhp)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlAmountDueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDate)
                    .addComponent(lblMDY))
                .addContainerGap())
        );

        getContentPane().add(pnlAmountDue);
        pnlAmountDue.setBounds(585, 16, 220, 130);

        pnlCheckOut.setBackground(new java.awt.Color (0, 0, 0, 0));
        pnlCheckOut.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Check Out", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Berlin Sans FB", 0, 11))); // NOI18N
        pnlCheckOut.setToolTipText("Check Out");

        btnCashTendered.setFont(new java.awt.Font("Berlin Sans FB", 0, 11)); // NOI18N
        btnCashTendered.setIcon(new javax.swing.ImageIcon(getClass().getResource("/varietystore_managementsystem/ELEMENTS/CASH_REGISTER/IconMoney.png"))); // NOI18N
        btnCashTendered.setText("Cash Tendered");
        btnCashTendered.setToolTipText("Cash Tendered");
        btnCashTendered.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCashTenderedActionPerformed(evt);
            }
        });

        btnCardPayment.setFont(new java.awt.Font("Berlin Sans FB", 0, 11)); // NOI18N
        btnCardPayment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/varietystore_managementsystem/ELEMENTS/CASH_REGISTER/IconCreditCard.png"))); // NOI18N
        btnCardPayment.setText("Card Payment");
        btnCardPayment.setToolTipText("Card Payment");
        btnCardPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCardPaymentActionPerformed(evt);
            }
        });

        btnCheckOut.setFont(new java.awt.Font("Berlin Sans FB", 0, 11)); // NOI18N
        btnCheckOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/varietystore_managementsystem/ELEMENTS/CASH_REGISTER/IconCashRegister.png"))); // NOI18N
        btnCheckOut.setText("Check Out");
        btnCheckOut.setToolTipText("Check Out Items");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });

        btnReciept.setFont(new java.awt.Font("Berlin Sans FB", 0, 11)); // NOI18N
        btnReciept.setIcon(new javax.swing.ImageIcon(getClass().getResource("/varietystore_managementsystem/ELEMENTS/CASH_REGISTER/IconReceipt.png"))); // NOI18N
        btnReciept.setText("Reciept");
        btnReciept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecieptActionPerformed(evt);
            }
        });

        btnNew.setFont(new java.awt.Font("Berlin Sans FB", 0, 11)); // NOI18N
        btnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/varietystore_managementsystem/ELEMENTS/CASH_REGISTER/IconCoin.png"))); // NOI18N
        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlCheckOutLayout = new javax.swing.GroupLayout(pnlCheckOut);
        pnlCheckOut.setLayout(pnlCheckOutLayout);
        pnlCheckOutLayout.setHorizontalGroup(
            pnlCheckOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCheckOutLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCheckOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnCheckOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCashTendered, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCardPayment, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlCheckOutLayout.createSequentialGroup()
                        .addComponent(btnReciept, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlCheckOutLayout.setVerticalGroup(
            pnlCheckOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCheckOutLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnCashTendered, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCardPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlCheckOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnNew, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                    .addComponent(btnReciept, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        getContentPane().add(pnlCheckOut);
        pnlCheckOut.setBounds(585, 157, 220, 390);

        lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/varietystore_managementsystem/ELEMENTS/CASH_REGISTER/CashRegister.png"))); // NOI18N
        getContentPane().add(lblBackground);
        lblBackground.setBounds(0, -30, 830, 600);

        mbCashRegister.setBackground(new java.awt.Color (0, 0, 0, 0));
        mbCashRegister.setBorderPainted(false);
        mbCashRegister.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        mbCashRegister.setOpaque(false);
        mbCashRegister.setPreferredSize(new java.awt.Dimension(120, 30));

        menuFile.setText("File");
        menuFile.setToolTipText("File");
        menuFile.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N

        menuItemNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menuItemNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/varietystore_managementsystem/ELEMENTS/CASH_REGISTER/IconCoin.png"))); // NOI18N
        menuItemNew.setText("New Transaction");
        menuItemNew.setToolTipText("Starts a new transaction");
        menuItemNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemNewActionPerformed(evt);
            }
        });
        menuFile.add(menuItemNew);

        menuItemExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        menuItemExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/varietystore_managementsystem/ELEMENTS/CASH_REGISTER/IconClose.png"))); // NOI18N
        menuItemExit.setText("Log Out");
        menuItemExit.setToolTipText("Exits the Cash Register program");
        menuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemExitActionPerformed(evt);
            }
        });
        menuFile.add(menuItemExit);

        mbCashRegister.add(menuFile);

        menuCashRegister.setText("Register");
        menuCashRegister.setToolTipText("Cash register settings");
        menuCashRegister.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N

        menuItemRegister.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuItemRegister.setIcon(new javax.swing.ImageIcon(getClass().getResource("/varietystore_managementsystem/ELEMENTS/CASH_REGISTER/IconHuman.png"))); // NOI18N
        menuItemRegister.setText("Register New User");
        menuItemRegister.setToolTipText("Add a registered user to the system");
        menuItemRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemRegisterActionPerformed(evt);
            }
        });
        menuCashRegister.add(menuItemRegister);

        menuItemViewUser.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuItemViewUser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/varietystore_managementsystem/ELEMENTS/CASH_REGISTER/IconID.png"))); // NOI18N
        menuItemViewUser.setText("View User Profile");
        menuItemViewUser.setToolTipText("View User Profile");
        menuItemViewUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemViewUserActionPerformed(evt);
            }
        });
        menuCashRegister.add(menuItemViewUser);

        menuItemEditUser.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuItemEditUser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/varietystore_managementsystem/ELEMENTS/CASH_REGISTER/IconPencil.png"))); // NOI18N
        menuItemEditUser.setText("Edit User Profile");
        menuItemEditUser.setToolTipText("Edit User Profile");
        menuItemEditUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemEditUserActionPerformed(evt);
            }
        });
        menuCashRegister.add(menuItemEditUser);

        menuItemSecure.setIcon(new javax.swing.ImageIcon(getClass().getResource("/varietystore_managementsystem/ELEMENTS/CASH_REGISTER/IconAirplane.png"))); // NOI18N
        menuItemSecure.setText("Secure Migration");
        menuItemSecure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSecureActionPerformed(evt);
            }
        });
        menuCashRegister.add(menuItemSecure);

        menuItemBackup.setIcon(new javax.swing.ImageIcon(getClass().getResource("/varietystore_managementsystem/ELEMENTS/CASH_REGISTER/IconBackup.png"))); // NOI18N
        menuItemBackup.setText("Backup Database");
        menuItemBackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemBackupActionPerformed(evt);
            }
        });
        menuCashRegister.add(menuItemBackup);

        menuItemRestore.setIcon(new javax.swing.ImageIcon(getClass().getResource("/varietystore_managementsystem/ELEMENTS/CASH_REGISTER/IconRestore.png"))); // NOI18N
        menuItemRestore.setText("Restore Database");
        menuItemRestore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemRestoreActionPerformed(evt);
            }
        });
        menuCashRegister.add(menuItemRestore);

        mbCashRegister.add(menuCashRegister);

        menuSwitch.setText("Switch");
        menuSwitch.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N

        menuItemInventory.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F8, 0));
        menuItemInventory.setIcon(new javax.swing.ImageIcon(getClass().getResource("/varietystore_managementsystem/ELEMENTS/CASH_REGISTER/IconBox.png"))); // NOI18N
        menuItemInventory.setText("Inventory");
        menuItemInventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemInventoryActionPerformed(evt);
            }
        });
        menuSwitch.add(menuItemInventory);

        menuItemViewReport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/varietystore_managementsystem/ELEMENTS/CASH_REGISTER/IconClipboard.png"))); // NOI18N
        menuItemViewReport.setText("View Report");
        menuItemViewReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemViewReportActionPerformed(evt);
            }
        });
        menuSwitch.add(menuItemViewReport);

        mbCashRegister.add(menuSwitch);

        menuAbout.setText("About");
        menuAbout.setToolTipText("Launch Help Files");
        menuAbout.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N

        menuItemHelp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        menuItemHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/varietystore_managementsystem/ELEMENTS/CASH_REGISTER/IconHelp.png"))); // NOI18N
        menuItemHelp.setText("Help");
        menuItemHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemHelpActionPerformed(evt);
            }
        });
        menuAbout.add(menuItemHelp);

        menuItemAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, 0));
        menuItemAbout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/varietystore_managementsystem/ELEMENTS/CASH_REGISTER/IconAbout.png"))); // NOI18N
        menuItemAbout.setText("About");
        menuItemAbout.setToolTipText("About");
        menuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAboutActionPerformed(evt);
            }
        });
        menuAbout.add(menuItemAbout);

        mbCashRegister.add(menuAbout);

        setJMenuBar(mbCashRegister);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAboutActionPerformed
        // TODO add your handling code here:
        String about = "Created By:\n\n"
                + "Database Administrator:  Evander Louis Macandog\n"
                + "System Analyst:          Nicole Mico\n"
                + "                                    Vincent Asotillo\n"
                + "Coders:                       Jermaine Geronimo\n"
                + "                                    Bryan James Ilaga\n"
                + "Documentators:          Patricia Lei Aglibot\n\n"
                + "BSIT 2-1D AY (2015 - 2016)\n";
        javax.swing.JOptionPane.showMessageDialog (null, about, "About", javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_menuItemAboutActionPerformed

    private void menuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemExitActionPerformed
        // TODO add your handling code here:
        int confirm = 0;
        
        confirm = javax.swing.JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?", "Confirm", javax.swing.JOptionPane.YES_NO_OPTION);
        if (confirm == javax.swing.JOptionPane.YES_OPTION) {
            dispose ();
            LogIn li = new LogIn ();
            li.launchFrame();
        }
    }//GEN-LAST:event_menuItemExitActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        tfProdNo.setText ("");
        tfProdName.setText ("");
        cboProdType.setSelectedIndex (0);
        
        tfProdNo.setEnabled (true);
        tfProdName.setEnabled (true);
        cboProdType.setEnabled (true);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        
        int results = 0;
        
        if (tfProdNo.getText().trim().equals ("") && tfProdName.getText().trim().equals ("")) {
            JOptionPane.showMessageDialog (null, "Please enter a valid product number or product name!", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else if (!tfProdNo.getText().trim().isEmpty() && !tfProdName.getText().trim().isEmpty()) {
            try {
                String sql = "SELECT * FROM " + productTableField + " WHERE " + productNameField + " LIKE '%" + tfProdName.getText().trim() + "%' AND " + productIDField 
                        + " = " + Integer.parseInt (tfProdNo.getText().trim()) + " AND ProductVisibility = 1;";
                Statement stmt = connection.createStatement();
                ResultSet rs = stmt.executeQuery (sql);
                
                while (rs.next()) {
                    results++;
                    if (results == 2) {
                        String report = "There are many results for your query!\nWe only showed the first one.\nPlease be more specific in your query.";
                        JOptionPane.showMessageDialog (null, report, "WARNING", JOptionPane.WARNING_MESSAGE);
                        break;
                    } else {
                        prodID = rs.getInt (productIDField);
                        prodName = rs.getString (productNameField);
                        prodPrice = rs.getDouble (productPriceField);
                        prodType = rs.getInt (productTypeField);
                        
                        tfProdNo.setText (prodID + "");
                        tfProdName.setText (prodName);
                        cboProdType.setSelectedIndex (prodType);
                        
                        tfProdNo.setEnabled (false);
                        tfProdName.setEnabled (false);
                        cboProdType.setEnabled (false);
                    }
                }
                
                if (results == 0) {
                    JOptionPane.showMessageDialog (null, "No Matching Products Found!", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
                
            } catch (SQLException sqle) {
                System.err.println ("Problem in database: " + sqle);
            }
        } else if (!tfProdNo.getText().trim().isEmpty() || !tfProdName.getText().trim().isEmpty()) {
            if (!tfProdNo.getText().trim().isEmpty()) {
                try {
                    String sql = "SELECT * FROM " + productTableField + " WHERE " + productIDField + " = " + Integer.parseInt (tfProdNo.getText().trim()) + ""
                            + " AND ProductVisibility = 1;";
                    Statement stmt = connection.createStatement();
                    ResultSet rs = stmt.executeQuery (sql);

                    while (rs.next()) {
                        results++;
                        if (results == 2) {
                            String report = "There are many results for your query!\nWe only showed the first one.\nPlease be more specific in your query.";
                            JOptionPane.showMessageDialog (null, report, "WARNING", JOptionPane.WARNING_MESSAGE);
                            break;
                        } else {
                            prodID = rs.getInt (productIDField);
                            prodName = rs.getString (productNameField);
                            prodPrice = rs.getDouble (productPriceField);
                            prodType = rs.getInt (productTypeField);

                            tfProdNo.setText (prodID + "");
                            tfProdName.setText (prodName);
                            cboProdType.setSelectedIndex (prodType);
                            
                            tfProdNo.setEnabled (false);
                            tfProdName.setEnabled (false);
                            cboProdType.setEnabled (false);
                        }
                    }
                    
                    if (results == 0) {
                        JOptionPane.showMessageDialog (null, "No Matching Products Found!", "ERROR", JOptionPane.ERROR_MESSAGE);
                    }

                } catch (SQLException sqle) {
                    System.err.println ("Problem in database: " + sqle);
                }
            } else {
                try {
                    String sql = "SELECT * FROM " + productTableField + " WHERE " + productNameField + " LIKE '%" + tfProdName.getText().trim() + "%' "
                            + " AND ProductVisibility = 1;";
                    Statement stmt = connection.createStatement();
                    ResultSet rs = stmt.executeQuery (sql);

                    while (rs.next()) {
                        results++;
                        if (results == 2) {
                            String report = "There are many results for your query!\nWe only showed the first one.\nPlease be more specific in your query.";
                            JOptionPane.showMessageDialog (null, report, "WARNING", JOptionPane.WARNING_MESSAGE);
                            break;
                        } else {
                            prodID = rs.getInt (productIDField);
                            prodName = rs.getString (productNameField);
                            prodPrice = rs.getDouble (productPriceField);
                            prodType = rs.getInt (productTypeField);
                            
                            tfProdNo.setText (prodID + "");
                            tfProdName.setText (prodName);
                            cboProdType.setSelectedIndex (prodType);
                            
                            tfProdNo.setEnabled (false);
                            tfProdName.setEnabled (false);
                            cboProdType.setEnabled (false);
                        }
                    }
                    
                    if (results == 0) {
                        JOptionPane.showMessageDialog (null, "No Matching Products Found!", "ERROR", JOptionPane.ERROR_MESSAGE);
                    }

                } catch (SQLException sqle) {
                    System.err.println ("Problem in database: " + sqle);
                }
            }
        }
        
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        tfProdNo.setText ("");
        tfProdName.setText ("");
        cboProdType.setSelectedIndex (0);
        
        tfProdNo.setEnabled (true);
        tfProdName.setEnabled (true);
        cboProdType.setEnabled (true);
        
        tfQty.setEnabled (true);
        btnAddToCart.setEnabled (true);
        btnRemoveProdData.setEnabled (true);
        
        if (prodName.trim().equals ("") || prodID == 0 || prodPrice == 0.00) {
            JOptionPane.showMessageDialog (null, "Please enter a valid product first!", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {
            lblPrice.setText (prodPrice + "");
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveProdDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveProdDataActionPerformed
        // TODO add your handling code here:
        tfQty.setText ("");
        lblPrice.setText ("0.00");
        lblTotalPrice.setText ("0.00");
        
        prodID = 0;
        prodName = "";
        prodPrice = 0.00;
        prodType = 0;
        
        tfQty.setEnabled (false);
        btnAddToCart.setEnabled (false);
        btnRemoveProdData.setEnabled (false);
    }//GEN-LAST:event_btnRemoveProdDataActionPerformed

    private void btnAddToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToCartActionPerformed
        // TODO add your handling code here:
        if (Double.parseDouble (lblTotalPrice.getText()) == 0.00) {
            JOptionPane.showMessageDialog (null, "Cannot add this item to the cart!", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {
            tfQty.setEnabled (false);
            btnAddToCart.setEnabled (false);
            btnRemoveProdData.setEnabled (false);

            Object [] row = {prodName, tfQty.getText(), lblTotalPrice.getText()};
            model.addRow(row);

            double currentTotalAmount = Double.parseDouble (lblTotalAmount.getText());
            currentTotalAmount += Double.parseDouble (lblTotalPrice.getText());
            lblTotalAmount.setText (currentTotalAmount + "");

            tfQty.setText ("");
            lblPrice.setText ("0.00");
            lblTotalPrice.setText ("0.00");

            btnProcToCheckOut.setEnabled (true);
            btnRemove.setEnabled (true);
        }
    }//GEN-LAST:event_btnAddToCartActionPerformed

    private void menuItemInventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemInventoryActionPerformed
        // TODO add your handling code here:
        boolean isAdmin = false;
        
        try {
            String sql = "Select " + userTypeField + " from " + userTableName + " where " + userIDField + " = " + UID;
            String userType = "";
            Statement stmt = connection.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                userType = rs.getString ("user_type");
            }
            
            try {
                if (userType.equals ("admin")) {
                    isAdmin = true;
                } else {
                    JOptionPane.showMessageDialog (null, "You should be an administrator to preform this!", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NullPointerException npe) {
                System.err.println ("Privilege error: " + npe);
                JOptionPane.showMessageDialog (null, "You should be an administrator to preform this!", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
            
        } catch (SQLException sqle) {
            System.err.println ("Problem in database:" + sqle);
        }
        
        if (isAdmin) {
            dispose();
            Inventory inv = new Inventory (connection, UID);
            inv.launchFrame();
        }
    }//GEN-LAST:event_menuItemInventoryActionPerformed

    private void menuItemViewUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemViewUserActionPerformed
        // TODO add your handling code here:
        dispose();
        ViewUser vu = new ViewUser (connection, UID);
        vu.launchFrame();
    }//GEN-LAST:event_menuItemViewUserActionPerformed

    private void menuItemRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemRegisterActionPerformed
        // TODO add your handling code here:
        dispose();
        RegisterNew rn = new RegisterNew (connection, UID);
        rn.launchFrame ();
    }//GEN-LAST:event_menuItemRegisterActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        // TODO add your handling code here:
        try {
            setOpacity (1.0f);
        } catch (IllegalComponentStateException icse) {
            System.err.println ("Cannot translucify window:\n" + icse);
        }
    }//GEN-LAST:event_formWindowGainedFocus

    private void formWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowLostFocus
        // TODO add your handling code here:
        try {
            setOpacity (0.7f);
        } catch (IllegalComponentStateException icse) {
            System.err.println ("Cannot translucify window:\n" + icse);
        }
    }//GEN-LAST:event_formWindowLostFocus

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        int option = JOptionPane.showConfirmDialog (null, "Are you sure you want to exit cash register?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            dispose ();
            LogIn li = new LogIn();
            li.launchFrame ();
        }
    }//GEN-LAST:event_formWindowClosing

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_formKeyPressed

    private void menuItemEditUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemEditUserActionPerformed
        // TODO add your handling code here:
        dispose ();
        EditUser eu = new EditUser (connection, UID);
        eu.launchFrame();
    }//GEN-LAST:event_menuItemEditUserActionPerformed

    private void menuItemBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemBackupActionPerformed
        // TODO add your handling code here:
        
        boolean isAdmin = false;
        
        try {
            String sql = "Select " + userTypeField + " from " + userTableName + " where " + userIDField + " = " + UID;
            String userType = "";
            Statement stmt = connection.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                userType = rs.getString ("user_type");
            }
            
            try {
                if (userType.equals ("admin")) {
                    isAdmin = true;
                } else {
                    JOptionPane.showMessageDialog (null, "You should be an administrator to preform this!", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NullPointerException npe) {
                System.err.println ("Privilege error: " + npe);
                JOptionPane.showMessageDialog (null, "You should be an administrator to preform this!", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
            
        } catch (SQLException sqle) {
            System.err.println ("Problem in database:" + sqle);
        }
        
        if (isAdmin) {
            try {
                String cmd [] = {"\"C:\\VSMS\\ext\\DBB32.exe\"", "-d"};
                ProcessBuilder builder = new ProcessBuilder ("\"C:\\VSMS\\ext\\DBB32.exe\"", "-d");
                builder.redirectErrorStream (true);
                Process p = builder.start();
                java.io.BufferedReader r = new java.io.BufferedReader(new java.io.InputStreamReader(p.getInputStream()));
                String line;
                while (true) {
                    line = r.readLine();
                    if (line == null) { break; }
                    System.out.println(line);
                }
                
                JOptionPane.showMessageDialog(null, "Back Up Complete!", "Success!", JOptionPane.INFORMATION_MESSAGE);
            } catch (java.io.IOException ioe) {
                System.err.println ("Fatal Error! Back up file not found!\n" + ioe);
            }
        }
    }//GEN-LAST:event_menuItemBackupActionPerformed

    private void menuItemSecureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSecureActionPerformed
        // TODO add your handling code here:
        
        boolean isAdmin = false;
        
        try {
            String sql = "Select " + userTypeField + " from " + userTableName + " where " + userIDField + " = " + UID;
            String userType = "";
            Statement stmt = connection.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                userType = rs.getString ("user_type");
            }
            
            try {
                if (userType.equals ("admin")) {
                    isAdmin = true;
                } else {
                    JOptionPane.showMessageDialog (null, "You should be an administrator to preform this!", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NullPointerException npe) {
                System.err.println ("Privilege error: " + npe);
                JOptionPane.showMessageDialog (null, "You should be an administrator to preform this!", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
            
        } catch (SQLException sqle) {
            System.err.println ("Problem in database:" + sqle);
        }
        
        if (isAdmin) {
            try {
                String cmd [] = {"\"C:\\VSMS\\ext\\DBB32.exe\"", "-d"};
                ProcessBuilder builder = new ProcessBuilder ("\"C:\\VSMS\\ext\\DBB32.exe\"", "-s");
                builder.redirectErrorStream (true);
                Process p = builder.start();
                java.io.BufferedReader r = new java.io.BufferedReader(new java.io.InputStreamReader(p.getInputStream()));
                String line;
                while (true) {
                    line = r.readLine();
                    if (line == null) { break; }
                    System.out.println(line);
                }
                
                JOptionPane.showMessageDialog(null, "Secure Back Up Complete!", "Success!", JOptionPane.INFORMATION_MESSAGE);
            } catch (java.io.IOException ioe) {
                System.err.println ("Fatal Error! Back up file not found!\n" + ioe);
            }
        }
    }//GEN-LAST:event_menuItemSecureActionPerformed

    private void menuItemRestoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemRestoreActionPerformed
        // TODO add your handling code here:
        
        boolean isAdmin = false;
        
        try {
            String sql = "Select " + userTypeField + " from " + userTableName + " where " + userIDField + " = " + UID;
            String userType = "";
            Statement stmt = connection.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                userType = rs.getString ("user_type");
            }
            
            try {
                if (userType.equals ("admin")) {
                    isAdmin = true;
                } else {
                    JOptionPane.showMessageDialog (null, "You should be an administrator to preform this!", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NullPointerException npe) {
                System.err.println ("Privilege error: " + npe);
                JOptionPane.showMessageDialog (null, "You should be an administrator to preform this!", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
            
        } catch (SQLException sqle) {
            System.err.println ("Problem in database:" + sqle);
        }
        
        if (isAdmin) {
            try {
                String cmd [] = {"\"C:\\VSMS\\ext\\DBR32.exe\"", "-d"};
                ProcessBuilder builder = new ProcessBuilder ("\"C:\\VSMS\\ext\\DBR32.exe\"", "-m");
                builder.redirectErrorStream (true);
                Process p = builder.start();
                java.io.BufferedReader r = new java.io.BufferedReader(new java.io.InputStreamReader(p.getInputStream()));
                String line;
                while (true) {
                    line = r.readLine();
                    if (line == null) { break; }
                    System.out.println(line);
                }
                JOptionPane.showMessageDialog(null, "Restoration Complete!", "Success!", JOptionPane.INFORMATION_MESSAGE);
            } catch (java.io.IOException ioe) {
                System.err.println ("Fatal Error! Back up file not found!\n" + ioe);
            }
        }
    }//GEN-LAST:event_menuItemRestoreActionPerformed

    private void tfQtyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfQtyKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String s = tfQty.getText().trim();
            Pattern p = Pattern.compile("[^0-9]");
            if (!s.isEmpty()) {
                if (p.matcher(s).find()) {
                    JOptionPane.showMessageDialog (null, "Please enter a valid number!", "ERROR", JOptionPane.ERROR_MESSAGE);
                    tfQty.setText("");
                } else {
                    int multiplicand = Integer.parseInt (tfQty.getText().trim());
                    double totalUnitPrice = 0.00;

                    totalUnitPrice = prodPrice * (double)multiplicand;
                    lblTotalPrice.setText (totalUnitPrice + "");
                }
            }
        }
    }//GEN-LAST:event_tfQtyKeyPressed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        int[] rows = tblOrder.getSelectedRows();
        for (int count = 0; count < rows.length; count++) {
            double removalPrice = Double.parseDouble (tblOrder.getModel().getValueAt(count, 2).toString());
            double currentPrice = Double.parseDouble (lblTotalAmount.getText());
            
            currentPrice -= removalPrice;
            lblTotalAmount.setText (currentPrice + "");
            
            model.removeRow (rows [count] - count);
        }
        
        if (tblOrder.getRowCount() == 0) {
            btnProcToCheckOut.setEnabled (false);
            btnRemove.setEnabled (false);
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnCashTenderedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCashTenderedActionPerformed
        // TODO add your handling code here:
        if (Double.parseDouble (lblTotalAmount.getText()) == 0) {
            JOptionPane.showMessageDialog (null, "Transaction is impossible", "Failed", JOptionPane.ERROR_MESSAGE);
        } else {
            customerNameInput = JOptionPane.showInputDialog (null, "Enter customer name: ", "Name", JOptionPane.INFORMATION_MESSAGE);
            customerAddressInput = JOptionPane.showInputDialog (null, "Enter customer address: ", "Address", JOptionPane.INFORMATION_MESSAGE);
            try {
                paymentRecieved = Double.parseDouble (JOptionPane.showInputDialog (null, "Enter recieved amount: ", "Amount", JOptionPane.INFORMATION_MESSAGE));
                if (paymentRecieved < Double.parseDouble (lblTotalAmount.getText())) {
                    JOptionPane.showMessageDialog (null, "Insufficient Amount!", "WARNING", JOptionPane.WARNING_MESSAGE);
                } else {
                    double change = paymentRecieved - Double.parseDouble (lblTotalAmount.getText());
                    JOptionPane.showMessageDialog (null, "Change is: PHP " + change, "Change", JOptionPane.INFORMATION_MESSAGE);
                    btnCashTendered.setEnabled (false);
                    btnCardPayment.setEnabled (false);
                    int customerID = 0;
                    try {
                        String sql = "INSERT INTO customer_tbl (CustomerName, Address) "
                                + "VALUES ('" + customerNameInput + "', '" + customerAddressInput + "');";
                            
                        Statement stmt = connection.createStatement();
                        boolean isSent = stmt.execute (sql);
                        
                        sql = "SELECT CustomerID FROM customer_tbl ORDER BY CustomerID DESC LIMIT 1;";
                        ResultSet rs = stmt.executeQuery (sql);
                        while (rs.next()) {
                            customerID = rs.getInt ("CustomerID");
                        }
                    } catch (SQLException sqle) {
                        System.err.println ("Problem in database:\n" + sqle);
                    }
                    
                    Calendar cal = Calendar.getInstance();
                    
                    for (int count = 0; count < tblOrder.getRowCount(); count++) {
                        try {
                            int productID = 0;
                            String sql = "SELECT ProductID FROM product_tbl WHERE ProductName = '" + tblOrder.getModel().getValueAt(count, 0).toString() + "' "
                                    + "ORDER BY ProductID DESC LIMIT 1;";
                            
                            Statement stmt = connection.createStatement();
                            ResultSet rs = stmt.executeQuery (sql);
                            
                            while (rs.next()) {
                                productID = rs.getInt("ProductID");
                            }
                            
                            sql = "INSERT INTO " + transactionTable + " "
                                    + "(UserID, CustomerID, ProductID, Quantity, Price_Total, Date, Payment_Code, Card_Number) "
                                    + "VALUES (" + UID + ", " + customerID + ", " + productID +  ", " + tblOrder.getModel().getValueAt(count, 1).toString() + ""
                                    + ", " + tblOrder.getModel().getValueAt(count, 2).toString() + ", " 
                                    + "STR_TO_DATE ('" + cal.get(Calendar.DATE) + "-" + (cal.get(Calendar.MONTH) + 1) + "-" + cal.get(Calendar.YEAR) + "', '%d-%m-%Y')" 
                                    + ", " + "'Cash', '" + cardNumberInput + "');";
                            stmt = connection.createStatement();
                            boolean isSent = stmt.execute (sql);

                            if (!isSent) {
                                isCash = true;
                                isReady = true;
                            }
                        } catch (SQLException sqle) {
                            System.err.println ("Problem in database:\n" + sqle);
                        }
                    }
                }
            } catch (NumberFormatException nfe) {
                System.err.println (nfe);
                JOptionPane.showMessageDialog (null, "Please enter a valid cash value!", "ERROR", JOptionPane.ERROR_MESSAGE);
            } catch (NullPointerException npe) {
                System.err.println (npe);
                JOptionPane.showMessageDialog (null, "Please enter a valid cash value!", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnCashTenderedActionPerformed

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // TODO add your handling code here:
        if (isReady) {
            
            for (int count = 0; count < tblOrder.getRowCount(); count++) {
                try {
                    String sql = "INSERT INTO history_tbl "
                            + "(ItemName, ItemQuantity) "
                            + "VALUES "
                            + "('" + tblOrder.getModel().getValueAt(count, 0).toString() + "', '" + tblOrder.getModel().getValueAt(count, 1).toString() + "');";
                    Statement stmt = connection.createStatement ();
                    stmt.execute (sql);
                    
                    int inventoryID = 0;
                    sql = "SELECT ProductID FROM product_tbl WHERE ProductName = '" + tblOrder.getModel().getValueAt(count, 0).toString() + "' "
                            + "AND ProductVisibility = 1";
                    ResultSet rs = stmt.executeQuery (sql);
                    while (rs.next()) {
                        inventoryID = rs.getInt ("ProductID");
                    }
                    
                    sql = "UPDATE inventory_tbl "
                            + "SET ItemQuantity = ItemQuantity - " + Integer.parseInt (tblOrder.getModel().getValueAt(count, 1).toString()) + " " 
                            + "WHERE InventoryID = " + inventoryID + ";";
                    stmt.execute (sql);
                    
                    JOptionPane.showMessageDialog (null, "Thank you for shopping!", "Come Again", JOptionPane.INFORMATION_MESSAGE);
                } catch (SQLException sqle) {
                    System.err.println ("Problem in database:\n" + sqle);
                }
            }
            
            isCheckout = true;
        }
    }//GEN-LAST:event_btnCheckOutActionPerformed

    private void btnProcToCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcToCheckOutActionPerformed
        // TODO add your handling code here:
        
        tfProdNo.setEnabled (false);
        tfProdName.setEnabled (false);
        cboProdType.setEnabled (false);
        btnSearch.setEnabled (false);
        btnCancel.setEnabled (false);
        btnAdd.setEnabled (false);
        
        btnRemove.setEnabled (false);
        btnProcToCheckOut.setEnabled (false);
    }//GEN-LAST:event_btnProcToCheckOutActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        // TODO add your handling code here:
        menuItemNewActionPerformed (evt);
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnRecieptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecieptActionPerformed
        // TODO add your handling code here:
        if (isCheckout) {
            String cashierName = "";

            try {
                String sql = "SELECT " + firstNameField + ", " + lastNameField + " "
                        + "FROM " + userTableName + " "
                        + "WHERE " + userIDField + " = " + UID + ";";
                Statement stmt = connection.createStatement ();
                ResultSet rs = stmt.executeQuery (sql);
                while (rs.next()) {
                    cashierName = rs.getString (firstNameField);
                    cashierName += " ";
                    cashierName += rs.getString (lastNameField);
                }

            } catch (SQLException sqle) {
                System.err.println ("Error in database: \n" + sqle);
            }
            
            try {
                String sql = "SELECT TransactionID "
                        + "FROM transaction_tbl "
                        + "WHERE TransactionID != 0 "
                        + "ORDER BY TransactionID DESC "
                        + "LIMIT 1;";
                Statement stmt = connection.createStatement ();
                ResultSet rs = stmt.executeQuery (sql);
                while (rs.next()) {
                    transactionNumber = rs.getInt ("TransactionID");
                }

            } catch (SQLException sqle) {
                System.err.println ("Error in database: \n" + sqle);
            }

            String report = "5J Sari-Sari Store\n"
                    + "Tondo, Manila\n\n"
                    + "====================\n"
                    + "SALES RECIEPT\n"
                    + "====================\n"
                    + "Cashier Name: " + cashierName + "\n"
                    + "Transaction Number: " + transactionNumber + "\n"
                    + "--------------------\n";
            for (int count = 0; count < tblOrder.getRowCount(); count++) {
                report += tblOrder.getModel().getValueAt(count, 0).toString() + "\n";
                report += tblOrder.getModel().getValueAt(count, 1).toString() + " @ " + tblOrder.getModel().getValueAt(count, 2).toString() + "\n";
            }
            report += "\n";
            report += "--------------------\n";
            report += "Total: " + lblTotalAmount.getText() + "\n";
            if (isCash) {
                report += "Cash Tendered: " + paymentRecieved + "\n";
                report += "Change: " + (paymentRecieved - Double.parseDouble (lblTotalAmount.getText())) + "\n";
            } else {
                report += "Card Payment: xxxxx\n";
            }
            report += "\n";
            report += "====================\n";
            report += "End of Transaction\n";
            report += "====================\n";

            JOptionPane.showMessageDialog (null, report, "Reciept", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnRecieptActionPerformed

    private void menuItemHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemHelpActionPerformed
        // TODO add your handling code here:
        if (Desktop.isDesktopSupported()) {
            try {
                File myFile = new File("C:/VarietyStore/doc/ProgramHelp.pdf");
                Desktop.getDesktop().open(myFile);
            } catch (IOException ioe) {
                System.err.println ("Error in File:\n" + ioe);
                JOptionPane.showMessageDialog (null, "No application registered for PDFs!\n", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog (null, "PDF function not supported on this PC!", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuItemHelpActionPerformed

    private void btnCardPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCardPaymentActionPerformed
        // TODO add your handling code here:
        if (Double.parseDouble (lblTotalAmount.getText()) == 0) {
            JOptionPane.showMessageDialog (null, "Transaction is impossible", "Failed", JOptionPane.ERROR_MESSAGE);
        } else {
            customerNameInput = JOptionPane.showInputDialog (null, "Enter customer name: ", "Name", JOptionPane.INFORMATION_MESSAGE);
            customerAddressInput = JOptionPane.showInputDialog (null, "Enter customer address: ", "Address", JOptionPane.INFORMATION_MESSAGE);
            try {
                    
                    cardNumber = Integer.parseInt (JOptionPane.showInputDialog (null, "Enter card number: ", "Card Payment", JOptionPane.INFORMATION_MESSAGE));
                    JOptionPane.showMessageDialog (null, "Card Payment Method logged!", "Change", JOptionPane.INFORMATION_MESSAGE);
                    btnCashTendered.setEnabled (false);
                    btnCardPayment.setEnabled (false);
                    
                    try {
                        String sql = "SELECT CustomerID FROM customer_tbl WHERE CustomerName = '" + customerNameInput + "'";
                        Statement stmt = connection.createStatement();
                        ResultSet rs = stmt.executeQuery (sql);
                        while (rs.next()) {
                            customerID = rs.getInt ("CustomerID");
                        }
                    } catch (SQLException sqle) {
                        System.err.println ("Problem in database:\n" + sqle);
                    }
                    
                    Calendar cal = Calendar.getInstance();
                    
                    for (int count = 0; count < tblOrder.getRowCount(); count++) {
                        try {
                            int productID = 0;
                            String sql = "SELECT ProductID FROM product_tbl WHERE ProductName = '" + tblOrder.getModel().getValueAt(count, 0).toString() + "'";
                            
                            Statement stmt = connection.createStatement();
                            ResultSet rs = stmt.executeQuery (sql);
                            
                            while (rs.next()) {
                                productID = rs.getInt("ProductID");
                            }
                            
                            sql = "INSERT INTO " + transactionTable + " "
                                    + "(UserID, CustomerID, ProductID, Quantity, Price_Total, Date, Payment_Code, Card_Number) "
                                    + "VALUES (" + UID + ", " + customerID + ", " + productID +  ", " + tblOrder.getModel().getValueAt(count, 1).toString() + ""
                                    + ", " + tblOrder.getModel().getValueAt(count, 2).toString() + ", " 
                                    + "STR_TO_DATE ('" + cal.get(Calendar.DATE) + "-" + (cal.get(Calendar.MONTH) + 1) + "-" + cal.get(Calendar.YEAR) + "', '%d-%m-%Y')" 
                                    + ", " + "'Card', '" + cardNumberInput + "')";
                            stmt = connection.createStatement();
                            boolean isSent = stmt.execute (sql);

                            if (!isSent) {
                                isCash = false;
                                isReady = true;
                            }

                        } catch (SQLException sqle) {
                            System.err.println ("Problem in database:\n" + sqle);
                        }
                    }
                
            } catch (NumberFormatException nfe) {
                System.err.println (nfe);
                JOptionPane.showMessageDialog (null, "Please enter a valid Card Number / Cash Value!", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnCardPaymentActionPerformed

    private void menuItemNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemNewActionPerformed
        // TODO add your handling code here:
        tfProdNo.setEnabled (true);
        tfProdName.setEnabled (true);
        cboProdType.setEnabled (true);
        btnSearch.setEnabled (true);
        btnCancel.setEnabled (true);
        btnAdd.setEnabled (true);
        tfProdNo.setText("");
        tfProdName.setText("");
        cboProdType.setSelectedIndex (0);
        
        lblPrice.setText ("0.00");
        tfQty.setEnabled (false);
        tfQty.setText ("");
        lblTotalPrice.setText ("0.00");
        btnAddToCart.setEnabled (false);
        btnRemoveProdData.setEnabled (false);
        
        model.setRowCount (0);
        btnProcToCheckOut.setEnabled (false);
        btnRemove.setEnabled (false);
        
        lblTotalAmount.setText ("0.00");
        
        customerNameInput = "";
        customerAddressInput = "";
        transactionNumber = 0;
        paymentRecieved = 0.00;
        isCash = true;
        isCheckout = false;
        
        btnCashTendered.setEnabled (true);
        btnCardPayment.setEnabled (true);
    }//GEN-LAST:event_menuItemNewActionPerformed

    private void menuItemViewReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemViewReportActionPerformed
        // TODO add your handling code here:
        ViewReport vr = new ViewReport (connection, UID);
        vr.launchFrame();
        dispose ();
    }//GEN-LAST:event_menuItemViewReportActionPerformed

    private void 
        userInit () 
    {
        
        /**
         *  Frame Tweaking
         */
        setTitle ("5J Sari-Sari Store - Cash Register");
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        double width = screenSize.getWidth();
        double height = screenSize.getHeight();
        
        //width = 826;     /* <-- Comment to Toggle Full Screen */
       // height = 597;     /* <-- Comment to Toggle Full Screen */
        
        //setSize ((int)width, (int)height);
        
        java.util.Date date = new java.util.Date ();
        java.text.SimpleDateFormat sdt = new java.text.SimpleDateFormat ("MM / dd / yyyy  h:mm a");
        lblMDY.setText (sdt.format (date));
        
        javax.swing.Timer simpleTimer;
        simpleTimer = new javax.swing.Timer(1000, (ActionEvent ae) -> {
            lblMDY.setText (sdt.format (new java.util.Date()));
        });
        
        simpleTimer.start();
        
        /**
         * Code Tweaking
         */
        setLocationRelativeTo (null);
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice gd = ge.getDefaultScreenDevice();
        
        if (!gd.isWindowTranslucencySupported(TRANSLUCENT)) {
            System.err.println ("Translucensy not supported.");
        }
        
        model = (DefaultTableModel) tblOrder.getModel();
        
    }
  
    protected void 
        launchFrame() 
    {
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                setOpacity (1.0f);
            } catch (IllegalComponentStateException icse) {
                System.err.println ("Cannot translucify window:\n" + icse);
            }
            new CashRegister(connection, UID).setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAddToCart;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnCardPayment;
    private javax.swing.JButton btnCashTendered;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnProcToCheckOut;
    private javax.swing.JButton btnReciept;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnRemoveProdData;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox cboProdType;
    private javax.swing.JLabel lblAmountPhp;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblEquals;
    private javax.swing.JLabel lblMDY;
    private javax.swing.JLabel lblMultiply;
    private javax.swing.JLabel lblPhp;
    private javax.swing.JLabel lblPhpTotal;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblProdName;
    private javax.swing.JLabel lblProdNo;
    private javax.swing.JLabel lblProdPriceInit;
    private javax.swing.JLabel lblProdType;
    private javax.swing.JLabel lblQty;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JLabel lblTotalAmount;
    private javax.swing.JLabel lblTotalAmountDue;
    private javax.swing.JLabel lblTotalHead;
    private javax.swing.JLabel lblTotalPrice;
    private javax.swing.JMenuBar mbCashRegister;
    private javax.swing.JMenu menuAbout;
    private javax.swing.JMenu menuCashRegister;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem menuItemAbout;
    private javax.swing.JMenuItem menuItemBackup;
    private javax.swing.JMenuItem menuItemEditUser;
    private javax.swing.JMenuItem menuItemExit;
    private javax.swing.JMenuItem menuItemHelp;
    private javax.swing.JMenuItem menuItemInventory;
    private javax.swing.JMenuItem menuItemNew;
    private javax.swing.JMenuItem menuItemRegister;
    private javax.swing.JMenuItem menuItemRestore;
    private javax.swing.JMenuItem menuItemSecure;
    private javax.swing.JMenuItem menuItemViewReport;
    private javax.swing.JMenuItem menuItemViewUser;
    private javax.swing.JMenu menuSwitch;
    private javax.swing.JPanel pnlAmountDue;
    private javax.swing.JPanel pnlCheckOut;
    private javax.swing.JPanel pnlOrder;
    private javax.swing.JPanel pnlProdData;
    private javax.swing.JPanel pnlSearch;
    private javax.swing.JScrollPane tableScroll;
    private javax.swing.JTable tblOrder;
    private javax.swing.JTextField tfProdName;
    private javax.swing.JTextField tfProdNo;
    private javax.swing.JTextField tfQty;
    // End of variables declaration//GEN-END:variables
}
